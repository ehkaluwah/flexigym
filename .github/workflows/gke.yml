# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build, Deploy to GKE and TEST.

on:
  push:
    branches:
    - jwt-auth

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: flexigym-cluster1
  GKE_ZONE: asia-southeast1-a
  IMAGEDB: db
  IMAGEWEB: authentication-api

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@master

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.SA_EMAIL }}
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        gcloud auth configure-docker
    # Build the DB Docker image
    #- name: Build DB
    #  run: |
    #    docker build -f Dockerfile.postgres -t asia.gcr.io/$GKE_PROJECT/$IMAGEDB:latest .

    # Push the Docker image to Google Container Registry
    #- name: Publish DB
    #  run: |
    #    docker push asia.gcr.io/$GKE_PROJECT/$IMAGEDB:latest

      # Build the DB Docker image
    - name: Build WEB
      run: |
        cd jwt-authentication
        docker build -f Dockerfile.prod -t asia.gcr.io/$GKE_PROJECT/$IMAGEWEB:latest .
      # Push the Docker image to Google Container Registry
    - name: Publish WEB
      run: |
        cd jwt-authentication
        docker push asia.gcr.io/$GKE_PROJECT/$IMAGEWEB:latest
    # Set up kustomize
    - name: Set up Kustomize
      run: |
        cd jwt-authentication
        curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        cd jwt-authentication
        gcloud container clusters get-credentials $GKE_CLUSTER \
          --zone $GKE_ZONE --project $GKE_PROJECT
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/db -n flask-jwt-auth-web
        kubectl rollout status deployment/web -n flask-jwt-auth-web
        kubectl get services -o wide -n flask-jwt-auth-web
        POD=$(kubectl get pod -n flask-jwt-auth-web -l io.kompose.service=web -o jsonpath="{.items[0].metadata.name}")
        kubectl exec -it $POD -n flask-jwt-auth-web -- python3.6 manage.py create_db
